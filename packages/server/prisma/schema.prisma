generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model users {
  userId         String           @id @map("user_id") @db.Uuid
  joinedDate     DateTime?        @map("joined_date") @db.Timestamp(6)
  firstName      String           @map("first_name") @db.VarChar(50)
  lastName       String           @map("last_name") @db.VarChar(50)
  isNew          Boolean          @default(true) @map("is_new")
  email          String           @unique @db.VarChar(255)
  avatar         String?          @db.VarChar(255)
  password       String?          @db.VarChar(255)
  handler        String?          @db.VarChar(50)
  eventAttendees eventAttendees[]
  guildMembers   guildMembers[]
}

model eventAttendees {
  userId    String @map("user_id") @db.Uuid
  eventId   String @map("event_id") @db.Uuid
  events    events @relation(fields: [eventId], references: [eventId], onDelete: Cascade, onUpdate: NoAction, map: "fk_event")
  attendees users  @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@id([userId, eventId])
  @@map("event_attendees")
}

model events {
  eventId        String           @id(map: "pk_event") @default(dbgenerated("gen_random_uuid()")) @map("event_id") @db.Uuid
  guildId        String           @map("guild_id") @db.Uuid
  title          String           @db.VarChar(255)
  description    String?          @db.VarChar(255)
  startDate      DateTime?        @map("start_date") @db.Timestamp(6)
  endDate        DateTime?        @map("end_date") @db.Timestamp(6)
  location       String?          @db.VarChar(255)
  thumbnail      String?          @db.VarChar(255)
  eventAttendees eventAttendees[]
  guilds         guilds           @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: Cascade, map: "fk_guild")
}

enum GuildMemberRole {
  Member  @map("member")
  Officer @map("officer")
  Owner   @map("owner")

  @@map("guild_member_role")
}

model guildMembers {
  userId  String          @map("user_id") @db.Uuid
  guildId String          @map("guild_id") @db.Uuid
  points  Int             @db.SmallInt
  role    GuildMemberRole @default(Member)
  guilds  guilds          @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: NoAction, map: "fk_guild")
  members users           @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@id([guildId, userId], map: "pk_guild_member")
  @@map("guild_members")
}

model guilds {
  guildId      String         @id(map: "guild_pkey") @default(dbgenerated("gen_random_uuid()")) @map("guild_id") @db.Uuid
  name         String         @db.VarChar(100)
  handler      String         @db.VarChar(50)
  description  String
  category     String         @db.VarChar(255)
  location     String?        @db.VarChar(255)
  website      String?        @db.VarChar(255)
  tags         String[]
  banner       String?        @db.VarChar(255)
  avatar       String?        @db.VarChar(255)
  media        String[]
  isInviteOnly Boolean        @map("invite_only")
  events       events[]
  members      guildMembers[]
}
